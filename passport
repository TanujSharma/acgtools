#!/usr/bin/python

import acg
from acg import ber
from acg.util import bin2asc,asc2bin,uint2bin,bin2uint
from Crypto.Hash import SHA
from Crypto.Cipher import DES, DES3
import random

class mrz:
	def __init__(self, mrz):
		self.mrz_str = mrz
		self.p_number = mrz[:9]
		self.p_check = mrz[9]
		self.country = mrz[10:13]
		self.dob = mrz[13:19]
		self.dob_check = mrz[19]
		self.gender = mrz[20]
		self.expire = mrz[21:27]
		self.expire_check = mrz[27]
		

class passport:
	ISO_7816_SW1_NOT_ALLOWED	= 0x69
	ISO_7816_SW2_BAD_SM		= 0x88
	ISO_7816_SW1_OK			= 0x90

	ISO_7816_SELECT			= 0xa4
	ISO_7816_SELECT_DF		= 0x1
	ISO_7816_SELECT_EF		= 0x2
	ISO_7816_SELECT_PARENT		= 0x3
	ISO_7816_SELECT_BY_NAME		= 0x4
	ISO_7816_SELECT_PATH		= 0x8
	ISO_7816_SELECT_PATH_REL	= 0x9

	ISO_7816_READ_BINARY		= 0xb0

	ISO_1170_GET_CHALLENGE		= 0x84
	ISO_1170_MUTUAL_AUTH		= 0x82

	DES_IV				= ''.join('\x00' for i in range(8))

	ICAO_CTR_ENC			= 1
	ICAO_CTR_MAC			= 2
	ICAO_9303_AID 			= bytearray([0xA0, 0x00, 0x00, 0x02,
						0x47, 0x10, 0x01])
	ICAO_9303_EF_COM		= 0x1e
	ICAO_9303_EF_SOD		= 0x1d

	def __pad(self, m, bits = 64):
		mask = (bits >> 3) - 1
		msg = m + chr(0x80)
		while len(msg) & mask:
			msg.append(chr(0))
		return msg

	def __unpad(self, m):
		if len(m) < 8:
			raise Exception("Enciphered message too short")
		for i in range(len(m) - 1, len(m) - 9, -1):
			if ord(m[-1:]) == 0x80:
				return m[:-1]
			m = m[:-1]
		raise Exception("Enciphered message incorrectly padded")

	def __do87(self, msg):
		"Build data object for encrypted message"
		do87 = chr(0x87) + chr(len(msg) + 1) + chr(1) + msg
		return do87

	def __do8e(self, msg):
		"Build data object for MAC"
		do8e = chr(0x8e) + chr(len(msg)) + msg
		return do8e
	
	def __do97(self, le):
		"Build data object for protected Le field"
		do97 = chr(0x97) + chr(0x1) + chr(le)
		return do97

	def __apdu_dbg(self, msg):
		if not self.__debug_apdu:
			return
		print "    " + msg

	def __dbg(self, msg):
		if not self.__debug:
			return
		print "  " + msg

	def __secure_enc(self, apdu):
		self.__apdu_dbg("CONSTRUCT SECURE PDU: %s"%bin2asc(apdu))

		# split apdu in to component parts
		hdr = apdu[:4]
		lc = apdu[4]
		le = apdu[5+lc:]

		# mask CLA
		hdr[0] = 0xc
		chdr = self.__pad(hdr)
		self.__apdu_dbg("hdr: %s"%bin2asc(hdr))
		self.__apdu_dbg("cmdhdr: %s"%bin2asc(chdr))

		# pad data
		if lc:
			data = apdu[5:5+lc]
			data = self.__pad(data)
			self.__apdu_dbg("lc: 0x%.2x"%lc)
			self.__apdu_dbg("data: %s"%bin2asc(data))
			data = self.__enc(self.ksenc, data)
			self.__apdu_dbg("encrypted data: %s"%bin2asc(data))
			# FIXME: DO'85' for ins & 0x1 == True
			do87 = self.__do87(data)
			self.__apdu_dbg("DO'87': %s"%bin2asc(do87))
		else:
			do87 = ''

		if len(le):
			self.__apdu_dbg("le: 0x%.2x"%ord(le))
			do97 = self.__do97(ord(le))
			le = '\x00'
		else:
			le = '\x00'
			do97 = ''

		M = chdr + do87 + do97
		self.__apdu_dbg("M = %s"%bin2asc(M))

		mac = self.__mac(self.ksmac, M, ssc = True)
		do8e = self.__do8e(mac)
		self.__apdu_dbg("MAC = %s"%bin2asc(mac))
		self.__apdu_dbg("DO8e = %s"%bin2asc(do8e))

		new_lc = chr(len(do87) + len(do97) + len(do8e))
		pdu = hdr + new_lc + do87 + do97 + do8e + le
		self.__apdu_dbg("FINAL PDU: %s"%bin2asc(pdu))
		return pdu

	def __rip_do(self, rapdu):
		ret = {}
		sm = rapdu
		while len(sm) >= 2:
			if sm[1] + 2 > len(sm):
				raise Exception("BAD SM %u", sm[1])
			if ret.has_key(sm[0]):
				raise Exception("Duplicate SM")
			ret[sm[0]] = sm[:2 + sm[1]]
			self.__apdu_dbg("DO'%2x' (%u bytes) -> %s"%(sm[0],
							sm[1],
							bin2asc(ret[sm[0]])))
			sm = sm[2 + sm[1]:]
		return ret

	def __secure_dec(self, sw1, sw2, pdu):
		if not len(pdu):
			return (pdu, sw1, sw2)

		self.__apdu_dbg("RAPDU: %s"%bin2asc(pdu))
		do = self.__rip_do(pdu)

		if not do.has_key(0x99) or not do.has_key(0x8e):
			raise Exception("Missing DO'99' or DO'8E' in RAPDU")

		do99 = do[0x99]
		do8e = do[0x8e]
		if do.has_key(0x87):
			do87 = do[0x87]
		else:
			do87 = ''

		if len(do99) != 4:
			raise Exception("Bad length of do99")
		if len(do8e) != 10:
			raise Exception("Bad length of do8e")

		mac = do8e[2:]
		cmac = self.__mac(self.ksmac, do87 + do99, ssc = True)
		if mac != cmac:
			raise Exception("Bad MAC in RAPDU: %s != %s"%(
				bin2asc(mac), bin2asc(cmac)))

		if len(do87):
			if do87[2] != 0x1:
				self.__apdu_dbg("WARN: Erroneous padding byte")
			ret = self.__unpad(self.__dec(self.ksenc, do87[3:]))
		else:
			ret = ''
		self.__apdu_dbg("FINAL RAPDU: %.2x%.2x %s"%(do99[2], do99[3],
								bin2asc(ret)))
		return (ret, do99[2], do99[3])

	def __secure_apdu(self, apdu):
		pdu = self.__secure_enc(apdu)
		(d, sw1, sw2) = self.card.apdu(pdu)
		if sw1 == self.ISO_7816_SW1_NOT_ALLOWED and \
			sw2 == self.ISO7861_SW2_BAD_SM:
			return (d, sw1, sw2)
		(ret, sw1, sw2) = self.__secure_dec(sw1, sw2, d)
		return (ret, sw1, sw2)

	def apdu(self, pdu, secure = None):
		if secure == None:
			secure = self.__secure
		if not secure:
			return self.card.apdu(pdu)
		else:
			return self.__secure_apdu(pdu)

	def __sel(self, p1, p2, data, secure = None):
		pdu = bytearray([0, self.ISO_7816_SELECT,
				p1, p2, len(data)]) + data
		return self.apdu(pdu, secure = secure)

	def __sel_sfi(self, sfi):
		fi = chr(1) + chr(sfi)
		return self.__sel(self.ISO_7816_SELECT_EF, 0xc, fi)

	def __read_binary(self, le, ofs = 0, secure = None):
		p1 = chr(ofs >> 8)
		if ord(p1) & 0x80:
			raise Exception("Offset must be < %u"%(1<<15))
		p2 = chr(ofs & 0xff)
		pdu = bytearray([0, self.ISO_7816_READ_BINARY,
				p1, p2, 0, chr(le)])
		return self.apdu(pdu, secure = secure)

	def __get_challenge(self, len = 8):
		pdu = bytearray([0, self.ISO_1170_GET_CHALLENGE, 0, 0, len])
		return self.apdu(pdu)

	def __mutual_auth(self, auth):
		pdu = bytearray([0, self.ISO_1170_MUTUAL_AUTH, 0, 0, len(auth)])
		pdu += auth
		pdu += chr(len(auth))
		return self.apdu(pdu)

	def __init__(self, card):
		self.card = card
		self.tag = card.hselect()
		self.__secure = False
		self.__debug_apdu = False
		self.__debug = True
		try:
			self.__rng = random.SystemRandom()
		except:
			self.__rng = random.WinchmannHill()
		(data, sw1, sw2) = self.__sel(self.ISO_7816_SELECT_BY_NAME,
						0xc,
						self.ICAO_9303_AID)
		if sw1 != self.ISO_7816_SW1_OK:
			raise TypeError, "Not a valid passport"

	def __des_parity(self,data):
        	adjusted= ''
        	for x in range(len(data)):
                	y= ord(data[x]) & 0xfe
                	parity= 0
                	for z in range(8):
                        	parity += y >>  z & 1
                	adjusted += chr(y + (not parity % 2))
        	return adjusted
	def __get_key(self, seed, type, len = 16):
		D = seed + uint2bin(type)
		sha = SHA.new(str(D))
		hash = self.__des_parity(sha.digest()[:len])
		return bytearray(hash)
	
	def __kseed(self, mrz):
		self.__dbg("Passport: %s check digit %s"%(mrz.p_number,
							mrz.p_check))
		self.__dbg("Country: %s"%mrz.country)
		self.__dbg("Date of birth: %s check digit %s"%(mrz.dob,
							mrz.dob_check))
		self.__dbg("Gender: %s"%mrz.gender)
		self.__dbg("Expiry date: %s check digit %s"%(mrz.expire,
							mrz.expire_check))
		kmrz = mrz.p_number + mrz.p_check + \
			mrz.dob + mrz.dob_check + \
			mrz.expire + mrz.expire_check

		sha = SHA.new(kmrz)
		kseed = sha.digest()[:16]
		return (kmrz, bytearray(kseed))

	def __enc(self, kenc, msg):
		des = DES3.new(str(kenc), DES.MODE_CBC, self.DES_IV)
		ret = bytearray(des.encrypt(str(msg)))
		return ret

	def __dec(self, kenc, msg):
		des = DES3.new(str(kenc), DES.MODE_CBC, self.DES_IV)
		ret = bytearray(des.decrypt(str(msg)))
		return ret

	def __mac(self, kmac, message, ssc = False):
		desa = DES.new(str(kmac[0:8]), DES.MODE_ECB, self.DES_IV)
		desb = DES.new(str(kmac[8:16]), DES.MODE_ECB, self.DES_IV)

		if ssc:
			self.ssc = uint2bin(bin2uint(self.ssc) + 1, 8)
			msg = self.__pad(self.ssc + message)
		else:
			msg = self.__pad(message)
		#print "MAC msg %s with kmac %s"%(bin2asc(msg), bin2asc(kmac))

		mac = bytearray(self.DES_IV)
        	for y in range(0, len(msg), 8):
                	current= msg[y:y + 8]
			mac2 = bytearray()
                	for x in range(len(mac)):
				mac2 += chr(mac[x] ^ current[x])
                	mac= bytearray(desa.encrypt(str(mac2)))
        	mac= desb.decrypt(str(mac))
        	return bytearray(desa.encrypt(mac))

	def __rand(self, len):
		ret = bytearray()
		for i in range(len):
			ret += chr(self.__rng.getrandbits(8))
		return ret

	def __xor(self, a, b):
		assert(len(a) == len(b))
		out = bytearray()
		for x in range(len(a)):
			out += chr(a[x] ^ b[x])
		return out

	def basic_access_control(self, mrz):
		(self.kmrz, kseed) = self.__kseed(mrz)
		self.__dbg("Kmrz = %s"%self.kmrz)
		self.__dbg("Kseed = %s"%bin2asc(kseed))

		self.kenc = self.__get_key(kseed, self.ICAO_CTR_ENC)
		self.kmac = self.__get_key(kseed, self.ICAO_CTR_MAC)
		self.__dbg("Kenc = %s"%bin2asc(self.kenc))
		self.__dbg("Kmac = %s"%bin2asc(self.kmac))

		(d, sw1, sw2) = self.__get_challenge()
		if sw1 != self.ISO_7816_SW1_OK:
			raise Exception("GET_CHALLENGE failed")
		rnd_icc = d
		self.__dbg("RND.ICC = %s"%(bin2asc(rnd_icc)))

		rnd_ifd = self.__rand(8)
		k_ifd = self.__rand(16)
		#rnd_ifd = bytearray(''.join('\x00' for i in range(8)))
		#k_ifd = bytearray(''.join('\x00' for i in range(16)))
		self.__dbg("RND.ifd = %s"%bin2asc(rnd_ifd))
		self.__dbg("K.ifd = %s"%bin2asc(k_ifd))

		S = rnd_ifd + rnd_icc + k_ifd
		self.__dbg("S = %s"%bin2asc(S))

		e_ifd = self.__enc(self.kenc, S)
		m_ifd = self.__mac(self.kmac, e_ifd)
		self.__dbg("Eifd = %s"%bin2asc(e_ifd))
		self.__dbg("Mifd = %s"%bin2asc(m_ifd))
		(d, sw1, sw2) = self.__mutual_auth(e_ifd + m_ifd)
		if sw1 != self.ISO_7816_SW1_OK:
			raise Exception("MUTUAL_AUTH failed")

		data = d[:32]
		mac = d[32:40]
		emac = self.__mac(self.kmac, data)
		data = self.__dec(self.kenc, data)
		if mac != emac:
			raise Exception("MAC check: %s != %s"%(mac, emac))
		self.__dbg("MAC: %s"%bin2asc(mac))
		d_rnd_icc = data[:8]
		d_rnd_ifd = data[8:16]
		k_icc = data[16:]
		if d_rnd_icc != rnd_icc:
			raise Exception("RND.ICC check: %s != %s"%(d_rnd_icc,
								rnd_icc))
		if d_rnd_ifd != rnd_ifd:
			raise Exception("RND.ifd check: %s != %s"%(d_rnd_ifd,
								rnd_ifd))
		self.__dbg("K.icc: %s"%bin2asc(k_icc))
		s_seed = self.__xor(k_icc, k_ifd)
		self.__dbg("Session key seed: %s"%bin2asc(s_seed))

		self.ksenc = self.__get_key(s_seed, self.ICAO_CTR_ENC)
		self.ksmac = self.__get_key(s_seed, self.ICAO_CTR_MAC)
		self.__dbg("Senc = %s"%bin2asc(self.ksenc))
		self.__dbg("Smac = %s"%bin2asc(self.ksmac))

		self.ssc = rnd_icc[4:] + rnd_ifd[4:]
		self.__dbg("Sseq = %s"%bin2asc(self.ssc))

		self.__secure = True

	def __get_data_object(self, sfi):
		(d, sw1, sw2) = self.__sel_sfi(sfi)
		if sw1 != self.ISO_7816_SW1_OK:
			return False

		(hdr, sw1, sw2) = self.__read_binary(4)
		if sw1 != self.ISO_7816_SW1_OK:
			raise Exception("ARG")

		tl = ber.taglen(hdr)
		tlen = int(tl.len) + len(tl) - len(hdr)
		ofs = len(hdr)
		contents = hdr

		while tlen:
			if tlen > 112:
				rlen = 112
			else:
				rlen = tlen
			(data, sw1, sw2) = self.__read_binary(rlen, ofs)
			if sw1 != self.ISO_7816_SW1_OK:
				raise Exception("ARG %u/%u", rlen, tlen)
			tlen -= rlen
			ofs += rlen
			contents += data

		return contents

	def __to_file(self, fn, data):
		f = open(fn, 'w')
		f.write(str(data))
		f.close()

	def read_ef_com(self):
		data = self.__get_data_object(self.ICAO_9303_EF_COM)
		self.__to_file("EF.COM", data)
		b = ber.tlv(data)

		lds_ver = b[0x5f01][0].val
		uni_ver = b[0x5f36][0].val
		taglist = b[0x5c][0].val

		laa = int(str(lds_ver)[0:2])
		lbb = int(str(lds_ver)[2:4])

		uaa = int(str(uni_ver)[0:2])
		ubb = int(str(uni_ver)[2:4])
		ucc = int(str(uni_ver)[4:6])

		self.lds_ver = "%u.%u"%(laa, lbb)
		self.unicode_ver = "%u.%u.%u"%(uaa, ubb, ucc)
		self.taglist = taglist
		return (self.lds_ver, self.unicode_ver, self.taglist)

	def read_ef_sod(self):
		data = self.__get_data_object(self.ICAO_9303_EF_SOD)
		self.__to_file("EF.SOD", data)
		b = ber.tlv(data)
		#b.pretty_print()

	def read_ef_dg1(self):
		data = self.__get_data_object(1)
		self.__to_file("EF.DG1", data)
		b = ber.tlv(data)
		return b[0x5f1f][0].val

	def read_ef_dg2(self):
		data = self.__get_data_object(2)
		self.__to_file("EF.DG2", data)
		b = ber.tlv(data)
		b.pretty_print()

		biodata = b[0x7f61][0][0x7f60][0][0x5f2e][0]
		print biodata

def do_passport(card):
	p = passport(card)
	print_tag(p.tag)
	print "\nValid passport application"

	#m = mrz("1234567893GBRYYMMDD3SYYMMDD3<<<<<<<<<<<<<<00")
	m = mrz("8008367903GBR8108153M1809233<<<<<<<<<<<<<<00")

	p.basic_access_control(m)
	print "\nBasic Access Control Successful"

	(lds_ver, unicode_ver, taglist) = p.read_ef_com()
	print "\nRetrieved common data elements"
	print "  LDS Version: %s"%lds_ver
	print "  UNICODE Version: %s"%unicode_ver
	print "  Taglist: %s"%', '.join(map(lambda x: "0x%x"%ord(x),
					str(taglist)))

	full_mrz = p.read_ef_dg1()
	print "\nRetrieved MRZ"
	print "  " + full_mrz[:44]
	print "  " + full_mrz[44:]

	p.read_ef_dg2()

def print_tag(tag):
	print "Found %s tag with serial 0x%s"%(tag.typename, tag.serial_str)
	if tag.type == tag.TAG_TYPE_ISO_1443A:
		clevel = {
				tag.CASCADE_LEVEL1: 1,
				tag.CASCADE_LEVEL2: 2,
				tag.CASCADE_LEVEL3: 3,
			}
		if clevel.has_key(tag.cascade):
			print "  Cascade level %u"%clevel[tag.cascade]
	elif tag.type == tag.TAG_TYPE_ISO_1443B:
		return
	if tag.baud != tag.BAUD_UNKNOWN or \
		tag.frame_size != tag.FRAME_SIZE_UNKNOWN:
		print "  Baud rate %s, frame size %s bytes"%(
			tag.baud and str(tag.baud) + "k" or "UNKNOWN",
			tag.frame_size and tag.frame_size or "UNKNOWN")
	if tag.ats:
		print "  ATS: %s"%bin2asc(tag.ats)
	return

if __name__ == '__main__':
	for dev in acg.get_devlist():
		print dev.vendor
		print dev.product
		print "%s @ %u baud"%(dev.tty, dev.suggested_baud)
		try:
			card = acg.acg(line=dev.tty,
					baud = dev.suggested_baud,
					tracefile="acgtool.trace")
		except acg.ACG_Exception, e:
			print "ERROR: %s"%e.msg
			print
			continue

		do_passport(card)
