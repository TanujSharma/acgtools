#!/usr/bin/python

__copyright__ = "Copyright (c) 2008-2010 Gianni Tedesco"
__licence__ = "GPLv3"

import os, readline, atexit
import acg 

class CmdError(Exception):
	pass
def hex_dump(s):
	return
def ber_dump(s):
	return

class rfidsh:
	"An interactive RFID tag shell using acgtools."

	def cmd_quit(self, s, *arg):
		"Exit the shell."

		raise SystemExit

	def cmd_help(self, s, *arg):
		"Print out a help message."

		self.out("You need help:")
		keys = self.__cmd.keys()
		keys.sort()
		for x in keys:
			self.out("  %-10s: %s"%(x, self.__cmd[x].__doc__))

	def __dev_str(self, d):
		if d.vendor is not None and d.product is not None:
			return '%s - %s'%(d.vendor, d.product)
		elif d.vendor:
			return d.vendor
		elif d.product:
			return d.product
		else:
			return 'UNKNOWN'

	def cmd_devlist(self, s, *arg):
		"Print out a list of candidate RFID devices."
		for x in acg.get_devlist():
			self.out("%s - %s"%(x, self.__dev_str(x)))

	def cmd_dev(self, s, *arg):
		"Select a device by bus number and USB address."
		if len(arg) != 1:
			raise CmdError, "[tty]"

		dl = filter(lambda x:'%s'%x == arg[0], acg.get_devlist())
		if len(dl) == 0:
			raise CmdError, "device '%s' not found"%arg[0]
		d = dl[0]
		self.__dev = acg.acg(line = d.tty,
					baud = d.suggested_baud,
					tracefile = 'rfid-sh.trace')
		self.out('Using %s: %s'%(d.tty, self.__dev_str(d)))

	def cmd_list_tags(self, s, *arg):
		'List tags in field'
		if self.__dev is None:
			raise CmdError, 'Select an RFID device first'
		tags = self.__dev.multi_select()
		for tag in tags:
			#card.select(tag)
			map(self.out, acg.util.describe_tag(tag))
		self.out('')
	
	def cmd_select_tag(self, s, *arg):
		'Select a tag in the field'
		if self.__dev is None:
			raise CmdError, 'Select an RFID device first'
		self.__tag = self.__dev.select()
		self.out('Selected tag:')
		map(self.out, acg.util.describe_tag(self.__tag))

	def cmd_hselect_tag(self, s, *arg):
		'Select a tag in the field for hi-speed operation'
		if self.__dev is None:
			raise CmdError, 'Select an RFID device first'
		self.__tag = self.__dev.hselect()
		self.out('Selected tag:')
		map(self.out, acg.util.describe_tag(self.__tag))

	def cmd_cla(self, s, *arg):
		"Set CLA."

		if len(arg):
			self.__cla = int(arg[0], 0) & 0xff
		self.out("CLA = 0x%.2x"%self.__cla)

	def cmd_transmit(self, s, *arg):
		"Transmit a raw APDU (except for CLA)."

		if self.__dev is None:
			raise CmdError, 'Select an RFID device first'
		pdu = bytearray()
		pdu.extend(map(lambda x:int(x, 16), arg))
		self.__xfr = self.__dev.apdu(self.__xfr)
		self.__dump_results()

	def select_by_id(self, s, *arg):
		if len(arg) == 1 and arg[0] == "..":
			# select parent DF
			self.do_select(3, 0)
		elif len(arg):
			id = int(arg[0], 0)
			idbuf = chr(id >> 8) + chr(id & 0xff)
			self.do_select(0, 0, idbuf)
		else:
			raise CmdError, "id (..|id)"


	def select_by_name(self, s, *arg):
		try:
			name = ''
			for x in arg:
				name += chr(int(x, 16))
		except:
			name = s
		self.do_select(1<<2, 0, name)

	def select_by_path(self, s, *arg):
		raise CmdError, "Not implemented"

	def do_select(self, p1, p2, data = None):
		(data, sw1, sw2) = self.pdu(0xa4, p1, p2, data, 0)
		if sw1 == 0x61 or sw1 == 0x9f:
			return self.pdu(0xc0, 0, 0, le = sw2)
		else:
			return (data, sw1, sw2)

	def cmd_select(self, s, *arg):
		"Select a file by ID, name or path."

		if len(arg) == 0:
			raise CmdError, "(id|name|path) [optional..]"

		s = s[len(arg[0]):].lstrip()
		if arg[0] == "id":
			self.select_by_id(s, *arg[1:])
		elif arg[0] == "name":
			self.select_by_name(s, *arg[1:])
		elif arg[0] == "path":
			self.select_by_path(s, *arg[1:])
		else:
			raise CmdError, "by id name or path?"

		self.__dump_results()

	def cmd_ber(self, s, *arg):
		"Enable or disable BER TLV decoding of responses."

		if len(arg):
			a = arg[0].lower()
			if a in ["on", "true", "yes"]:
				self.__ber = True
			elif a in ["off", "false", "no"]:
				self.__ber = False
			else:
				raise CmdError, "on/off"

		self.out("BER TLV decoding: %s"%( \
			self.__ber and "on" or "off"))

	def cmd_hex(self, s, *arg):
		"Enable or disable HEX decoding of responses."

		if len(arg):
			a = arg[0].lower()
			if a in ["on", "true", "yes"]:
				self.__hex = True
			elif a in ["off", "false", "no"]:
				self.__hex = False
			else:
				raise CmdError, "on/off"

		self.out("HEX decoding: %s"%(self.__hex and "on" or "off"))

	def cmd_get(self, s, *arg):
		"Get a data object."

		if not len(arg):
			raise CmdError, "Must specify data object ID"

		x = int(arg[0], 0)

		(data, sw1, sw2) = self.pdu(0xca, x >> 8,  x & 0xff)
		if sw1 == 0x6c:
			self.out("0x%.4x"%x)
			self.pdu(0xca, x >> 8, x & 0xff, le = sw2)
		self.__dump_results()

	def cmd_bruteget(self, s, *arg):
		"Brute force data objects."

		x = 0
		while x < 0x10000:
			(data, sw1, sw2) = self.pdu(0xca, x >> 8,  x & 0xff)
			if sw1 == 0x6c:
				(data, sw1, sw2) = self.pdu(0xca, x >> 8,
							x & 0xff, le = sw2)
			if sw1 == 0x90:
				self.out("0x%.4x"%x)
				self.__dump_results()
			x += 1

	def cmd_challenge(self, s, *arg):
		"Retreive a random number from the card."

		if len(arg):
			le = int(arg[0])
		else:
			le = 8

		self.pdu(0x84, 0, 0, le = le)
		self.__dump_results(ber=False)

	def cmd_read_rec(self, s, *arg):
		"Read a record from the currently selected file."

		if len(arg) < 2:
			raise CmdError, "Must specify data object ID"

		sfi = int(arg[1])
		rec = int(arg[0])
		if len(arg) > 2:
			le = int(arg[2])
		else:
			le = 0

		(data, sw1, sw2) = self.pdu(0xb2, rec, (sfi << 3) | 4, le = le)
		del tmp 

		if sw1 == 0x6c or sw1 == 0x67:
			self.pdu(0xb2, rec, (sfi << 3) | 4, le = sw2)

		self.__dump_results()

	def cmd_brutecla(self, s, *arg):
		"Brute force CLA."

		if self.__dev is None:
			raise CmdError, 'Select an RFID device first'
		ret = {}
		i = 0
		while i < 0xff:
			pdu = bytearray([i, 0, 0, 0, 0])
			(_, sw1, sw2) = self.__dev.apdu(pdu)
			print '%d %d'%(sw1, sw2)
			if sw1 != 0x6e:
				if not ret.has_key((sw1, sw2)):
					ret[(sw1, sw2)] = []
				ret[(sw1, sw2)].append(i)
			i += 1

		for k in ret.keys():
			(sw1, sw2) = k
			self.out("Found %u classes, SW1=%.2x SW2=%.2x: %s"%(
					len(ret[k]), sw1, sw2,
					self.get_str_sw(sw1, sw2)))
			for v in ret[k]:
				self.out(" o CLA %.2x"%v)

	def cmd_brutefs(self, s, *arg):
		"Brute force file ID's."

		ret = {}
		i = 0x3f01

		dir = []
		for elem in arg:
			x = int(elem, 0)
			idbuf = chr(x >> 8) + chr(x & 0xff)
			dir.append(idbuf)

		for d in dir:
			self.do_select(0, 0, d)

		while i < 0x10000:
			if i == 0x3f00:
				i += 1
				continue
			idbuf = chr(i >> 8) + chr(i & 0xff)
			self.do_select(0x0, 0, idbuf)
			(_, sw1, sw2) = self.__xfr
			if not ret.has_key((sw1, sw2)):
				ret[(sw1, sw2)] = []
			if len(ret[(sw1, sw2)]) < 100:
				ret[(sw1, sw2)].append(i)
			if len(ret[(sw1, sw2)]) == 100:
				ret[(sw1, sw2)].append(None)
			if sw1 == 0x90:
				for d in dir:
					self.do_select(0, 0, d)

			i += 1

		for k in ret.keys():
			(sw1, sw2) = k
			self.out("Found %u objects, SW1=%.2x SW2=%.2x: %s"%(
					len(ret[k]), sw1, sw2, 
					self.get_str_sw(sw1, sw2)))
			for v in ret[k]:
				if v == None:
					self.out(" o Some results ommitted...")
				else:
					self.out(" o ID 0x%.4x"%v)

	def cmd_bruteins(self, s, *arg):
		"Brute force INS."

		ret = {}
		i = 0
		while i < 0x100:
			# Try not to select a file incase commands are
			# file-specific.
			if i == 0xa4:
				p1 = 0xff
				p2 = 0xff
			else:
				p1 = 0
				p2 = 0

			try:
				self.pdu(i, p1, p2, le = 0)
			except:
				print "INS %.2x made card freak"%i
				i += 1
				continue

			(_, sw1, sw2) = self.__xfr
			if sw1 != 0x6d and sw1 != 0x6e:
				if not ret.has_key((sw1, sw2)):
					ret[(sw1, sw2)] = []
				ret[(sw1, sw2)].append(i)
			i += 1

		for k in ret.keys():
			(sw1, sw2) = k
			self.out("Found %u objects, SW1=%.2x SW2=%.2x: %s"%(
					len(ret[k]), sw1, sw2, 
					self.get_str_sw(sw1, sw2)))
			for v in ret[k]:
				s = self.get_str_ins(v)
				if s == None:
					s = ""
				else:
					s = " (%s)"%s

				self.out(" o INS %.2x%s"%(v, s))

	def get_str_ins(self, ins):
		if not self.__ins_db.has_key(ins):
			return None
		ent = self.__ins_db[ins]
		if len(ent) == 1:
			return ent[0][0]

		for (name, cla) in ent:
			if cla == None:
				continue
			if self.__cla == cla:
				return name

		return '/'.join(map(lambda x:x[0], ent))

	def load_ins_db(self, fn = 'ins.db'):
		f = open(fn)
		while True:
			l = f.readline()
			if l == '':
				break
			if l[0] == '#':
				continue

			tok = l.split()

			if len(tok) == 2:
				cla = None
			elif len(tok) == 3:
				cla = int(tok[2], 0)
			else:
				raise CmdError, "Malformed INS file"

			ins = int(tok[0], 0)
			name = tok[1]
			del tok

			if not self.__ins_db.has_key(ins):
				self.__ins_db[ins] = []
			self.__ins_db[ins].append((name, cla))

	def load_sw_db(self, fn = 'sw.db'):
		f = open(fn)
		cur = None
		while True:
			l = f.readline()
			if l == '':
				break
			if l[0] == '#':
				continue

			tok = l[:-1].split(None, 1)
			if len(tok) != 2:
				raise CmdError, "Malformed SW file"

			sw = int(tok[0], 0)
			name = tok[1]
			del tok

			if l[0] == '\t':
				(name, d) = cur
				d[sw] = name
			else:
				if not self.__sw_db.has_key(sw):
					self.__sw_db[sw] = (name, {})

				cur = self.__sw_db[sw]

	def get_str_sw(self, sw1 = None, sw2 = None):
		(_, x_sw1, x_sw2) = self.__xfr
		if sw1 == None:
			sw1 = x_sw1
		if sw2 == None:
			sw2 = x_sw2

		if not self.__sw_db.has_key(sw1):
			return 'Unknown'

		(name, d) = self.__sw_db[sw1]

		if not d.has_key(sw2):
			return name

		return d[sw2]

	def pdu(self, ins, p1, p2, data = None, le = None):
		if self.__dev is None:
			raise CmdError, 'Select an RFID device first'
		x = bytearray()
		x.append(self.__cla)
		x.append(ins)
		x.append(p1)
		x.append(p2)
		totlen = 4
		if data is not None:
			x.append(len(data)) # Lc
			x.extend(bytearray(data))
			totlen += 1 + len(data)
		if  le is not None:
			x.append(le)
			totlen += 1
		while totlen < 5:
			x.append(0)
			totlen += 1
		self.__xfr = self.__dev.apdu(x)
		return self.__xfr

	def __dump_results(self, ber = None):
		(ret, sw1, sw2) = self.__xfr
		self.out("SW1 = 0x%.2x : SW2 = 0x%.2x : %s (%u bytes)"%(
				sw1, sw2, self.get_str_sw(), len(ret)))
		if len(ret):
			if ber == None:
				if self.__hex:
					hex_dump(ret);
				if self.__ber:
					ber_dump(ret);
			elif ber == True:
				ber_dump(ret);
			elif ber == False:
				hex_dump(ret);
			else:
				raise CmdError, "ber == %r"%ber

	def __init__(self, tracefile=None):
		self.__dev = None
		self.__tag = None
		self.__txlen = 1024
		self.__rxlen = 1024
		self.__cla = 0
		self.__hex = True
		self.__ber = False
		self.__ins_db = {}
		self.__sw_db = {}
		self.__cmd = {
			"devlist":	self.cmd_devlist,
			"dev":		self.cmd_dev,
			'list_tags':	self.cmd_list_tags,
			'select_tag':	self.cmd_select_tag,
			'hselect_tag':	self.cmd_hselect_tag,
			"quit":		self.cmd_quit,
			"cla":		self.cmd_cla,
			"transmit":	self.cmd_transmit,
			"brute_cla":	self.cmd_brutecla,
			"brute_ins":	self.cmd_bruteins,
			"brute_get":	self.cmd_bruteget,
			"brute_fs":	self.cmd_brutefs,
			"select":	self.cmd_select,
			"read_rec":	self.cmd_read_rec,
			"challenge":	self.cmd_challenge,
			"get":		self.cmd_get,
			"ber":		self.cmd_ber,
			"hex":		self.cmd_hex,
			"help":		self.cmd_help,
			"?":		self.cmd_help,
		}

	def prompt(self):
		if self.__tag is None:
			return "rfid-$ "
		else:
			return "rfid-# "

	def out(self, s):
		print "rfid> " + s

	def command(self, s):
		arg = s.split()
		if len(arg) < 1:
			return
		s = s[len(arg[0]):].lstrip()

		if not self.__cmd.has_key(arg[0]):
			self.out("Unknown command: %s"%arg[0])
			return

		try:
			self.__cmd[arg[0]](s, *arg[1:])
		except CmdError, e:
			self.out("Command failed: %s"%e.args[0])
		except acg.ACG_Exception, e:
			self.out("Operation failed: %s"%e.msg)
		except Exception, e:
			self.out("Error: %s"%' '.join(e.args))

######### PROGRAM MAIN LOOP #########
if __name__ == '__main__':
	# TODO: Parse command line for log-file and databases
	shell = rfidsh("rfid-sh.log")

	# Command historry file
	histfile = os.path.join(os.environ["HOME"], ".rfid-sh")
	try:
		readline.read_history_file(histfile)
	except IOError:
		pass
	atexit.register(readline.write_history_file, histfile)
	del os, histfile

	# Instruction names
	try:
		shell.load_ins_db()
	except IOError:
		pass

	# Error code names
	try:
		shell.load_sw_db()
	except IOError:
		pass

	while True:
		try:
			s = raw_input(shell.prompt())
		except EOFError:
			print
			break
		except KeyboardInterrupt:
			print
			continue

		try:
			shell.command(s);
		except KeyboardInterrupt:
			continue
